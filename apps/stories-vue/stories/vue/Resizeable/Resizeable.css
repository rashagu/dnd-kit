body, html, #root {
	height: 100%;
}

.Test {
	--max-width: 1600px;
	--gutter: 3vw;

	--grid-gutter: calc(var(--gutter, 4vw) - 11px);
	--cell-max-width: calc( ( var(--max-width, 1500px) - (11px * 23) ) / 24 );
	--inset-padding: 0vw;
	--container-width: min(var(--max-width, 1500px), calc(100vw - var(--gutter, 4vw) * 2 - var(--inset-padding) ));

	grid-template-rows: repeat(20,minmax(calc(var(--container-width) * 0.0215), auto));
	grid-template-columns: minmax(var(--grid-gutter), 1fr) repeat(24, minmax(0, var(--cell-max-width))) minmax(var(--grid-gutter), 1fr);
}

.Grid {
	display: grid;
	position: relative;
	grid-area: 1/1/-1/-1;

	--max-width: 1600px;
	--gap: 11px;
	--gutter: 3vw;
	--grid-gutter: calc(var(--gutter, 4vw) - 11px);

	--cell-max-width: calc( ( var(--max-width, 1500px) - (11px * 23) ) / 24 );
	--inset-padding: 0vw;
	--container-width: min(var(--max-width, 1500px), calc(100vw - var(--gutter, 4vw) * 2 - var(--inset-padding) ));

	--column-width: var(--cell-max-width);
	--column-height: calc(var(--container-width) * 0.0215);

	grid-template-rows: repeat(20,minmax(var(--column-height), auto));
	grid-template-columns: repeat(24, minmax(0, var(--column-width)));

	row-gap: var(--gap);
  column-gap: var(--gap);
}

.reveal::before {
	--bg-width: calc(var(--column-width) + var(--gap));
	--bg-height: calc(var(--column-height) + var(--gap));

	--border-color: #EEE;
	--gap-color: #EEE;
	--cell-color: transparent;

	content: '';
	position: absolute;
	inset: 0;
	pointer-events: none;
	background-image:
		repeating-linear-gradient(
			-90deg,
			var(--gap-color) 0px,
			var(--gap-color) calc(var(--gap) - 1px),
			var(--border-color) var(--gap),
			var(--cell-color) calc(var(--gap)),
			var(--cell-color) calc(var(--bg-width) - 1px),
			var(--border-color) var(--bg-width)
		),
		repeating-linear-gradient(
			0deg,
			var(--gap-color) 0px,
			var(--gap-color) calc(var(--gap) - 1px),
			var(--border-color) var(--gap),
			var(--cell-color) var(--gap),
			var(--cell-color) calc(var(--bg-height) - 1px),
			var(--border-color) var(--bg-height)
		);
	background-size: var(--bg-width) var(--bg-height);
}


.GridItem {
	position: relative;
	padding: 20px;
	// grid-area: attr(data-position);
}

.GridItem:hover, .selected {
	outline: 2px solid blue;
}


.Handle {
	position: absolute;
	padding: 10px;
	display: flex;
}

.Handle::after {
	content: '';
	width: 10px;
	height: 10px;
	line-height: 0;
	margin: 0;
	border-radius: 3px;
	border: 2px solid blue;
	background-color: white;
	box-sizing: border-box;
}

.Handle[data-direction="N"] {
	top: -1px;
	left: 50%;
	transform: translate3d(-50%, -50%, 0);
	cursor: row-resize;
}

.Handle[data-direction="NW"] {
	top: -1px;
	left: -1px;
	transform: translate3d(-50%, -50%, 0);
	cursor: nw-resize;
}

.Handle[data-direction="NE"] {
	top: -1px;
	right: -1px;
	transform: translate3d(50%, -50%, 0);
	cursor: ne-resize;
}

.Handle[data-direction="S"] {
	bottom: -1px;
	left: 50%;
	transform: translate3d(-50%, 50%, 0);
	cursor: row-resize;
}

.Handle[data-direction="SW"] {
	bottom: -1px;
	left: -1px;
	transform: translate3d(-50%, 50%, 0);
	cursor: sw-resize;
}

.Handle[data-direction="W"] {
	top: 50%;
	left: -1px;
	transform: translate3d(-50%, -50%, 0);
	cursor: col-resize;
}

.Handle[data-direction="SE"] {
	bottom: -1px;
	right: -1px;
	transform: translate3d(50%, 50%, 0);
	cursor: se-resize;
}

.Handle[data-direction="E"] {
	top: 50%;
	right: -1px;
	transform: translate3d(50%, -50%, 0);
	cursor: col-resize;
}
